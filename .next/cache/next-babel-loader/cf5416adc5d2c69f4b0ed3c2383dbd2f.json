{"ast":null,"code":"/* eslint-disable import/prefer-default-export */\nimport { LOADING, LOAD_MOST_POPULAR_USERS, ERROR_WHILE_FETCHING_INITIAL_TABLE, CITY_TO_SEARCH, SNACKBAR_STATUS } from './types';\nimport axios from 'axios';\n\nconst pick = require('lodash.pick');\n\nconst map = require('lodash.map');\n\nconst partialRight = require('lodash.partialright');\n\nconst headers = {\n  'Content-Type': 'application/json'\n};\nexport const handleSnackBarStatus = bool => {\n  return {\n    type: SNACKBAR_STATUS,\n    payload: bool\n  };\n};\n\nconst getEachUserGivenId = (id, index) => {\n  return new Promise((resolve, reject) => {\n    axios.all([axios.get(`https://api.github.com/users/${id}`), axios.get(`https://api.github.com/users/${id}/repos?per_page=200`)]).then(axios.spread((userProfile, userRepo) => {\n      let userProfileData = userProfile.data;\n      const totalUserStars = userRepo.data.map(i => i.stargazers_count).reduce((total, item) => total + item);\n      let result = pick(userProfileData, ['login', 'bio', 'email', 'name', 'id']);\n      let modifiedResult = Object.assign(result, {\n        totalUserStars: totalUserStars\n      });\n\n      if (result && Object.entries(modifiedResult).length !== 0 && result.constructor === Object) {\n        resolve(modifiedResult);\n      } else {\n        reject(new Error('No data received'));\n      }\n    })).catch(err => {\n      console.log('HIT the ERROR');\n    });\n  });\n}; // Util function to merge to topUsers array the data from userProfiles array, as they are coming from two different api calls\n\n\nconst mergeArraysConditionally = (topUsers, userProfiles) => {\n  let merged = []; // First return the first array with only elements whose id matches with an element's id from the second array\n\n  topUsers.every(i => userProfiles.map(j => j.id).includes(i.id) ? merged.push(i) : null); // Now that I have got two separate arrays of matched and the original array, simply merge the matched array (on the basis of ID) with the original array containing the data.\n\n  merged = merged.map(i => Object.assign(i, userProfiles.find(j => j.id === i.id)));\n  return merged;\n};\n\nexport const loadMostPopularUsers = (city, page, numbersToFetch) => async dispatch => {\n  try {\n    dispatch({\n      type: LOADING,\n      payload: true\n    });\n    axios({\n      method: 'get',\n      // url: `https://api.github.com/search/users?q=location%3A${city}&followers%3A%3E%3D1000&ref=searchresults&s=followers&type=Users`,\n      url: `https://api.github.com/search/users?q=location:${city}`,\n      headers\n    }).then(async res => {\n      const totalNoOfUsersFromAPI = res.data.items.length;\n      const start = page * numbersToFetch;\n      const end = start + numbersToFetch;\n      const resData = res.data.items.slice(start, end);\n      var topTenUsersInCity = map(resData, partialRight(pick, ['login', 'id', 'avatar_url']));\n      const userIds = topTenUsersInCity.map(i => i.login);\n      let topTenUserProfiles = await userIds.map(getEachUserGivenId);\n      let topUserIndividualProfiles = Promise.all(topTenUserProfiles);\n      topUserIndividualProfiles.then(res => {\n        dispatch({\n          type: LOAD_MOST_POPULAR_USERS,\n          payload: {\n            topTenUsersInCity: mergeArraysConditionally(topTenUsersInCity, res),\n            totalNoOfUsersFromAPI\n          }\n        });\n      }).catch(err => {\n        dispatch({\n          type: ERROR_WHILE_FETCHING_INITIAL_TABLE,\n          payload: 'Error occurred while loading Initial Data'\n        });\n      });\n    }).catch(err => {\n      dispatch({\n        type: ERROR_WHILE_FETCHING_INITIAL_TABLE,\n        payload: 'Error occurred while loading Initial Data'\n      });\n    });\n  } catch (err) {\n    dispatch({\n      type: ERROR_WHILE_FETCHING_INITIAL_TABLE,\n      payload: 'Error occurred while loading Initial Data'\n    });\n  }\n};\nexport const handleCityToSearchChange = city => {\n  return {\n    type: CITY_TO_SEARCH,\n    payload: city\n  };\n};","map":{"version":3,"sources":["/Users/yuriikalashnikov/Desktop/popular-user-in-github/actions/getUserActions.js"],"names":["LOADING","LOAD_MOST_POPULAR_USERS","ERROR_WHILE_FETCHING_INITIAL_TABLE","CITY_TO_SEARCH","SNACKBAR_STATUS","axios","pick","require","map","partialRight","headers","handleSnackBarStatus","bool","type","payload","getEachUserGivenId","id","index","Promise","resolve","reject","all","get","then","spread","userProfile","userRepo","userProfileData","data","totalUserStars","i","stargazers_count","reduce","total","item","result","modifiedResult","Object","assign","entries","length","constructor","Error","catch","err","console","log","mergeArraysConditionally","topUsers","userProfiles","merged","every","j","includes","push","find","loadMostPopularUsers","city","page","numbersToFetch","dispatch","method","url","res","totalNoOfUsersFromAPI","items","start","end","resData","slice","topTenUsersInCity","userIds","login","topTenUserProfiles","topUserIndividualProfiles","handleCityToSearchChange"],"mappings":"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","sourcesContent":["/* eslint-disable import/prefer-default-export */\nimport {\n    LOADING,\n    LOAD_MOST_POPULAR_USERS,\n    ERROR_WHILE_FETCHING_INITIAL_TABLE,\n    CITY_TO_SEARCH,\n    SNACKBAR_STATUS,\n  } from './types'\n  \n  import axios from 'axios'\n  const pick = require('lodash.pick')\n  const map = require('lodash.map')\n  const partialRight = require('lodash.partialright')\n  \n  const headers = {\n    'Content-Type': 'application/json',\n  }\n  \n  export const handleSnackBarStatus = bool => {\n    return {\n      type: SNACKBAR_STATUS,\n      payload: bool,\n    }\n  }\n  \n  const getEachUserGivenId = (id, index) => {\n    return new Promise((resolve, reject) => {\n      axios\n        .all([\n          axios.get(`https://api.github.com/users/${id}`),\n          axios.get(`https://api.github.com/users/${id}/repos?per_page=200`),\n        ])\n        .then(\n          axios.spread((userProfile, userRepo) => {\n            let userProfileData = userProfile.data\n            const totalUserStars = userRepo.data\n              .map(i => i.stargazers_count)\n              .reduce((total, item) => total + item)\n            let result = pick(userProfileData, [\n              'login',\n              'bio',\n              'email',\n              'name',\n              'id',\n            ])\n            let modifiedResult = Object.assign(result, {\n              totalUserStars: totalUserStars,\n            })\n            if (\n              result &&\n              Object.entries(modifiedResult).length !== 0 &&\n              result.constructor === Object\n            ) {\n              resolve(modifiedResult)\n            } else {\n              reject(new Error('No data received'))\n            }\n          }),\n        )\n        .catch(err => {\n          console.log('HIT the ERROR')\n        })\n    })\n  }\n  \n  // Util function to merge to topUsers array the data from userProfiles array, as they are coming from two different api calls\n  const mergeArraysConditionally = (topUsers, userProfiles) => {\n    let merged = []\n  \n    // First return the first array with only elements whose id matches with an element's id from the second array\n    topUsers.every(i =>\n      userProfiles.map(j => j.id).includes(i.id) ? merged.push(i) : null,\n    )\n  \n    // Now that I have got two separate arrays of matched and the original array, simply merge the matched array (on the basis of ID) with the original array containing the data.\n    merged = merged.map(i =>\n      Object.assign(\n        i,\n        userProfiles.find(j => j.id === i.id),\n      ),\n    )\n    return merged\n  }\n  \n  export const loadMostPopularUsers = (\n    city,\n    page,\n    numbersToFetch,\n  ) => async dispatch => {\n    try {\n      dispatch({\n        type: LOADING,\n        payload: true,\n      })\n      axios({\n        method: 'get',\n        // url: `https://api.github.com/search/users?q=location%3A${city}&followers%3A%3E%3D1000&ref=searchresults&s=followers&type=Users`,\n        url: `https://api.github.com/search/users?q=location:${city}`,\n        headers,\n      })\n        .then(async res => {\n          const totalNoOfUsersFromAPI = res.data.items.length\n          const start = page * numbersToFetch\n          const end = start + numbersToFetch\n          const resData = res.data.items.slice(start, end)\n          var topTenUsersInCity = map(\n            resData,\n            partialRight(pick, ['login', 'id', 'avatar_url']),\n          )\n  \n          const userIds = topTenUsersInCity.map(i => i.login)\n          let topTenUserProfiles = await userIds.map(getEachUserGivenId)\n          let topUserIndividualProfiles = Promise.all(topTenUserProfiles)\n          topUserIndividualProfiles\n            .then(res => {\n              dispatch({\n                type: LOAD_MOST_POPULAR_USERS,\n                payload: {\n                  topTenUsersInCity: mergeArraysConditionally(\n                    topTenUsersInCity,\n                    res,\n                  ),\n                  totalNoOfUsersFromAPI,\n                },\n              })\n            })\n            .catch(err => {\n              dispatch({\n                type: ERROR_WHILE_FETCHING_INITIAL_TABLE,\n                payload: 'Error occurred while loading Initial Data',\n              })\n            })\n        })\n        .catch(err => {\n          dispatch({\n            type: ERROR_WHILE_FETCHING_INITIAL_TABLE,\n            payload: 'Error occurred while loading Initial Data',\n          })\n        })\n    } catch (err) {\n      dispatch({\n        type: ERROR_WHILE_FETCHING_INITIAL_TABLE,\n        payload: 'Error occurred while loading Initial Data',\n      })\n    }\n  }\n  \n  export const handleCityToSearchChange = city => {\n    return {\n      type: CITY_TO_SEARCH,\n      payload: city,\n    }\n  }\n  "]},"metadata":{},"sourceType":"module"}