{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n\n/* eslint-disable react/button-has-type */\n\n/* eslint-disable-next-line react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Typography } from '@material-ui/core';\nimport GlobalSnackbar from '../components/GlobalSnackbar';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport { loadMostPopularUsers, handleCityToSearchChange, handleSnackBarStatus } from '../actions/getUserActions';\nimport Button from '@material-ui/core/Button';\nimport Autosuggest from 'react-autosuggest';\nimport EachUserListItem from './EachUserListItem';\nimport cityList from '../utils/country-city-js';\nimport { defaultTheme } from 'react-autosuggest/dist/theme';\nimport { useStyles } from './GithubMostPopularListStyle';\nimport TablePagination from '@material-ui/core/TablePagination';\n\nconst escapeRegexCharacters = str => {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n};\n\nconst getSuggestions = value => {\n  const escapedValue = escapeRegexCharacters(value.trim());\n\n  if (escapedValue === '') {\n    return [];\n  }\n\n  const regex = new RegExp('^' + escapedValue, 'i');\n  return cityList.filter(language => regex.test(language.name));\n};\n\nconst getSuggestionValue = suggestion => {\n  return suggestion.name;\n};\n\nconst renderSuggestion = suggestion => {\n  return __jsx(\"span\", null, suggestion.name);\n};\n\nconst GithubMostPopularList = () => {\n  const globalStore = useSelector(state => state.globalStore);\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const {\n    0: value,\n    1: setValue\n  } = useState('');\n  const {\n    0: suggestions,\n    1: setSuggestions\n  } = useState([]);\n  const {\n    0: currentCityShown,\n    1: setcurrentCityShown\n  } = useState('');\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  useEffect(() => {\n    dispatch(loadMostPopularUsers(currentCityShown, page, rowsPerPage));\n  }, [currentCityShown, dispatch, page, rowsPerPage]);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const closeSnackbar = () => dispatch(handleSnackBarStatus(false));\n\n  const loadAllData = () => {\n    const city = globalStore.city_to_search;\n    setcurrentCityShown(city);\n    dispatch(loadMostPopularUsers(city, page, rowsPerPage));\n  };\n\n  const onChange = (event, {\n    newValue,\n    method\n  }) => {\n    dispatch(handleCityToSearchChange(newValue));\n    setValue(newValue);\n  };\n\n  const onSuggestionsFetchRequested = ({\n    value\n  }) => {\n    setSuggestions(getSuggestions(value));\n  };\n\n  const onSuggestionsClearRequested = () => {\n    setSuggestions([]);\n  };\n\n  const inputProps = {\n    placeholder: 'Start typing your city name',\n    value,\n    onChange: onChange\n  };\n  return __jsx(\"div\", {\n    className: classes.container\n  }, __jsx(\"div\", {\n    className: classes.tableAndFabContainer\n  }, console.log('PAGE ', page), globalStore.loading ? __jsx(\"div\", {\n    className: classes.spinner\n  }, __jsx(LoadingSpinner, null)) : __jsx(\"div\", {\n    className: classes.table\n  }, console.log('SNACKBAR ', globalStore.snackbar), __jsx(\"div\", {\n    className: classes.inputandButtonContainer\n  }, __jsx(Autosuggest, {\n    suggestions: suggestions,\n    onSuggestionsFetchRequested: onSuggestionsFetchRequested,\n    onSuggestionsClearRequested: onSuggestionsClearRequested,\n    getSuggestionValue: getSuggestionValue,\n    renderSuggestion: renderSuggestion,\n    inputProps: inputProps,\n    theme: _objectSpread({}, defaultTheme, {\n      container: classes.react_autosuggest__container,\n      input: classes.react_autosuggest__input,\n      inputOpen: classes.react_autosuggest__input__open,\n      inputFocused: classes.react_autosuggest__input__focused,\n      suggestionsContainer: classes.react_autosuggest__suggestions_container,\n      suggestionsContainerOpen: classes.react_autosuggest__suggestions_container__open,\n      suggestionsList: classes.react_autosuggest__suggestions_list,\n      suggestion: classes.react_autosuggest__suggestion,\n      suggestionHighlighted: classes.react_autosuggest__suggestion__highlighted\n    })\n  }), __jsx(Button, {\n    onClick: loadAllData,\n    variant: \"contained\",\n    size: \"large\",\n    color: \"primary\",\n    disabled: globalStore.city_to_search === ''\n  }, __jsx(Typography, {\n    variant: \"h3\",\n    className: classes.modalButtonLabelEnabled\n  }, \"Load City Data\"))), __jsx(\"div\", {\n    style: {\n      marginTop: '20px'\n    }\n  }, __jsx(EachUserListItem, {\n    currentCityShown: currentCityShown\n  }))), __jsx(TablePagination, {\n    rowsPerPageOptions: [10, 15, 20],\n    component: \"div\",\n    count: globalStore.totalNoOfUsersFromAPI,\n    rowsPerPage: rowsPerPage,\n    page: page,\n    onChangePage: handleChangePage,\n    onChangeRowsPerPage: handleChangeRowsPerPage\n  }), __jsx(GlobalSnackbar, {\n    open: globalStore.snackbar === true || typeof globalStore.snackbar === 'object' || typeof globalStore.snackbar === 'string' || globalStore.snackbar instanceof String,\n    variant: \"error\",\n    message: 'Error occurred while loading Initial Data',\n    onClose: closeSnackbar\n  })));\n};\n\nexport default GithubMostPopularList;","map":null,"metadata":{},"sourceType":"module"}