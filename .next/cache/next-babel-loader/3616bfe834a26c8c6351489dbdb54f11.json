{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n\n/* eslint-disable react/button-has-type */\n\n/* eslint-disable-next-line react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Typography } from '@material-ui/core';\nimport GlobalSnackbar from '../components/GlobalSnackbar';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport { loadMostPopularUsers, handleCityToSearchChange, handleSnackBarStatus } from '../actions/getUserActions';\nimport Button from '@material-ui/core/Button';\nimport Autosuggest from 'react-autosuggest';\nimport EachUserListItem from './EachUserListItem';\nimport cityList from '../utils/country-city-js';\nimport { defaultTheme } from 'react-autosuggest/dist/theme';\nimport { useStyles } from './GithubMostPopularListStyle';\nimport TablePagination from '@material-ui/core/TablePagination';\n\nvar escapeRegexCharacters = function escapeRegexCharacters(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n};\n\nvar getSuggestions = function getSuggestions(value) {\n  var escapedValue = escapeRegexCharacters(value.trim());\n\n  if (escapedValue === '') {\n    return [];\n  }\n\n  var regex = new RegExp('^' + escapedValue, 'i');\n  return cityList.filter(function (language) {\n    return regex.test(language.name);\n  });\n};\n\nvar getSuggestionValue = function getSuggestionValue(suggestion) {\n  return suggestion.name;\n};\n\nvar renderSuggestion = function renderSuggestion(suggestion) {\n  return __jsx(\"span\", null, suggestion.name);\n};\n\nvar GithubMostPopularList = function GithubMostPopularList() {\n  var globalStore = useSelector(function (state) {\n    return state.globalStore;\n  });\n  var dispatch = useDispatch();\n  var classes = useStyles();\n\n  var _useState = useState(''),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var _useState2 = useState([]),\n      suggestions = _useState2[0],\n      setSuggestions = _useState2[1];\n\n  var _useState3 = useState(''),\n      currentCityShown = _useState3[0],\n      setcurrentCityShown = _useState3[1];\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      page = _React$useState2[0],\n      setPage = _React$useState2[1];\n\n  var _React$useState3 = React.useState(10),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      rowsPerPage = _React$useState4[0],\n      setRowsPerPage = _React$useState4[1];\n\n  useEffect(function () {\n    dispatch(loadMostPopularUsers(currentCityShown, page, rowsPerPage));\n  }, [currentCityShown, dispatch, page, rowsPerPage]);\n\n  var handleChangePage = function handleChangePage(event, newPage) {\n    setPage(newPage);\n  };\n\n  var handleChangeRowsPerPage = function handleChangeRowsPerPage(event) {\n    setRowsPerPage(_parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  var closeSnackbar = function closeSnackbar() {\n    return dispatch(handleSnackBarStatus(false));\n  };\n\n  var loadAllData = function loadAllData() {\n    var city = globalStore.city_to_search;\n    setcurrentCityShown(city);\n    dispatch(loadMostPopularUsers(city, page, rowsPerPage));\n  };\n\n  var onChange = function onChange(event, _ref) {\n    var newValue = _ref.newValue,\n        method = _ref.method;\n    dispatch(handleCityToSearchChange(newValue));\n    setValue(newValue);\n  };\n\n  var onSuggestionsFetchRequested = function onSuggestionsFetchRequested(_ref2) {\n    var value = _ref2.value;\n    setSuggestions(getSuggestions(value));\n  };\n\n  var onSuggestionsClearRequested = function onSuggestionsClearRequested() {\n    setSuggestions([]);\n  };\n\n  var inputProps = {\n    placeholder: 'Start typing your city name',\n    value: value,\n    onChange: onChange\n  };\n  return __jsx(\"div\", {\n    className: classes.container\n  }, __jsx(\"div\", {\n    className: classes.tableAndFabContainer\n  }, console.log('PAGE ', page), globalStore.loading ? __jsx(\"div\", {\n    className: classes.spinner\n  }, __jsx(LoadingSpinner, null)) : __jsx(\"div\", {\n    className: classes.table\n  }, console.log('SNACKBAR ', globalStore.snackbar), __jsx(\"div\", {\n    className: classes.inputandButtonContainer\n  }, __jsx(Autosuggest, {\n    suggestions: suggestions,\n    onSuggestionsFetchRequested: onSuggestionsFetchRequested,\n    onSuggestionsClearRequested: onSuggestionsClearRequested,\n    getSuggestionValue: getSuggestionValue,\n    renderSuggestion: renderSuggestion,\n    inputProps: inputProps,\n    theme: _objectSpread({}, defaultTheme, {\n      container: classes.react_autosuggest__container,\n      input: classes.react_autosuggest__input,\n      inputOpen: classes.react_autosuggest__input__open,\n      inputFocused: classes.react_autosuggest__input__focused,\n      suggestionsContainer: classes.react_autosuggest__suggestions_container,\n      suggestionsContainerOpen: classes.react_autosuggest__suggestions_container__open,\n      suggestionsList: classes.react_autosuggest__suggestions_list,\n      suggestion: classes.react_autosuggest__suggestion,\n      suggestionHighlighted: classes.react_autosuggest__suggestion__highlighted\n    })\n  }), __jsx(Button, {\n    onClick: loadAllData,\n    variant: \"contained\",\n    size: \"large\",\n    color: \"primary\",\n    disabled: globalStore.city_to_search === ''\n  }, __jsx(Typography, {\n    variant: \"h3\",\n    className: classes.modalButtonLabelEnabled\n  }, \"Load City Data\"))), __jsx(\"div\", {\n    style: {\n      marginTop: '20px'\n    }\n  }, __jsx(EachUserListItem, {\n    currentCityShown: currentCityShown\n  }))), __jsx(TablePagination, {\n    rowsPerPageOptions: [10, 15, 20],\n    component: \"div\",\n    count: globalStore.totalNoOfUsersFromAPI,\n    rowsPerPage: rowsPerPage,\n    page: page,\n    onChangePage: handleChangePage,\n    onChangeRowsPerPage: handleChangeRowsPerPage\n  }), __jsx(GlobalSnackbar, {\n    open: globalStore.snackbar === true || typeof globalStore.snackbar === 'object' || typeof globalStore.snackbar === 'string' || globalStore.snackbar instanceof String,\n    variant: \"error\",\n    message: 'Error occurred while loading Initial Data',\n    onClose: closeSnackbar\n  })));\n};\n\nexport default GithubMostPopularList;","map":null,"metadata":{},"sourceType":"module"}