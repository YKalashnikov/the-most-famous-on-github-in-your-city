{"ast":null,"code":"var _jsxFileName = \"/Users/yuriikalashnikov/Desktop/popular-user-in-github/containers/GithubMostPopularList.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n\n/* eslint-disable react/button-has-type */\n\n/* eslint-disable-next-line react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Typography } from '@material-ui/core';\nimport GlobalSnackbar from '../../components_libs/GlobalSnackbar';\nimport LoadingSpinner from '../../components_libs/LoadingSpinner';\nimport { loadMostPopularUsers, handleCityToSearchChange, handleSnackBarStatus } from '../../actions/getUserActions';\nimport Button from '@material-ui/core/Button';\nimport Autosuggest from 'react-autosuggest';\nimport EachUserListItem from './EachUserListItem';\nimport cityList from '../../utils/country-city-js';\nimport { defaultTheme } from 'react-autosuggest/dist/theme';\nimport { useStyles } from './GithubMostPopularListStyles';\nimport TablePagination from '@material-ui/core/TablePagination';\n\nconst escapeRegexCharacters = str => {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n};\n\nconst getSuggestions = value => {\n  const escapedValue = escapeRegexCharacters(value.trim());\n\n  if (escapedValue === '') {\n    return [];\n  }\n\n  const regex = new RegExp('^' + escapedValue, 'i');\n  return cityList.filter(language => regex.test(language.name));\n};\n\nconst getSuggestionValue = suggestion => {\n  return suggestion.name;\n};\n\nconst renderSuggestion = suggestion => {\n  return __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, suggestion.name);\n};\n\nconst GithubMostPopularList = () => {\n  const globalStore = useSelector(state => state.globalStore);\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const {\n    0: value,\n    1: setValue\n  } = useState('');\n  const {\n    0: suggestions,\n    1: setSuggestions\n  } = useState([]);\n  const {\n    0: currentCityShown,\n    1: setcurrentCityShown\n  } = useState('');\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  useEffect(() => {\n    dispatch(loadMostPopularUsers(currentCityShown, page, rowsPerPage));\n  }, [currentCityShown, dispatch, page, rowsPerPage]);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const closeSnackbar = () => dispatch(handleSnackBarStatus(false));\n\n  const loadAllData = () => {\n    const city = globalStore.city_to_search;\n    setcurrentCityShown(city);\n    dispatch(loadMostPopularUsers(city, page, rowsPerPage));\n  };\n\n  const onChange = (event, {\n    newValue,\n    method\n  }) => {\n    dispatch(handleCityToSearchChange(newValue));\n    setValue(newValue);\n  };\n\n  const onSuggestionsFetchRequested = ({\n    value\n  }) => {\n    setSuggestions(getSuggestions(value));\n  };\n\n  const onSuggestionsClearRequested = () => {\n    setSuggestions([]);\n  };\n\n  const inputProps = {\n    placeholder: 'Start typing your city name',\n    value,\n    onChange: onChange\n  };\n  return __jsx(\"div\", {\n    className: classes.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: classes.tableAndFabContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, console.log('PAGE ', page), globalStore.loading ? __jsx(\"div\", {\n    className: classes.spinner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, __jsx(LoadingSpinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  })) : __jsx(\"div\", {\n    className: classes.table,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, console.log('SNACKBAR ', globalStore.snackbar), __jsx(\"div\", {\n    className: classes.inputandButtonContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, __jsx(Autosuggest, {\n    suggestions: suggestions,\n    onSuggestionsFetchRequested: onSuggestionsFetchRequested,\n    onSuggestionsClearRequested: onSuggestionsClearRequested,\n    getSuggestionValue: getSuggestionValue,\n    renderSuggestion: renderSuggestion,\n    inputProps: inputProps,\n    theme: _objectSpread({}, defaultTheme, {\n      container: classes.react_autosuggest__container,\n      input: classes.react_autosuggest__input,\n      inputOpen: classes.react_autosuggest__input__open,\n      inputFocused: classes.react_autosuggest__input__focused,\n      suggestionsContainer: classes.react_autosuggest__suggestions_container,\n      suggestionsContainerOpen: classes.react_autosuggest__suggestions_container__open,\n      suggestionsList: classes.react_autosuggest__suggestions_list,\n      suggestion: classes.react_autosuggest__suggestion,\n      suggestionHighlighted: classes.react_autosuggest__suggestion__highlighted\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), __jsx(Button, {\n    onClick: loadAllData,\n    variant: \"contained\",\n    size: \"large\",\n    color: \"primary\",\n    disabled: globalStore.city_to_search === '',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"h3\",\n    className: classes.modalButtonLabelEnabled,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, \"Load City Data\"))), __jsx(\"div\", {\n    style: {\n      marginTop: '20px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, __jsx(EachUserListItem, {\n    currentCityShown: currentCityShown,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }))), __jsx(TablePagination, {\n    rowsPerPageOptions: [10, 15, 20],\n    component: \"div\",\n    count: globalStore.totalNoOfUsersFromAPI,\n    rowsPerPage: rowsPerPage,\n    page: page,\n    onChangePage: handleChangePage,\n    onChangeRowsPerPage: handleChangeRowsPerPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }), __jsx(GlobalSnackbar, {\n    open: globalStore.snackbar === true || typeof globalStore.snackbar === 'object' || typeof globalStore.snackbar === 'string' || globalStore.snackbar instanceof String,\n    variant: \"error\",\n    message: 'Error occurred while loading Initial Data',\n    onClose: closeSnackbar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  })));\n};\n\nGithubMostPopularList.propTypes = {\n  onClose: PropTypes.func.isRequired\n};\nexport default GithubMostPopularList;","map":{"version":3,"sources":["/Users/yuriikalashnikov/Desktop/popular-user-in-github/containers/GithubMostPopularList.js"],"names":["React","useEffect","useState","useSelector","useDispatch","PropTypes","Typography","GlobalSnackbar","LoadingSpinner","loadMostPopularUsers","handleCityToSearchChange","handleSnackBarStatus","Button","Autosuggest","EachUserListItem","cityList","defaultTheme","useStyles","TablePagination","escapeRegexCharacters","str","replace","getSuggestions","value","escapedValue","trim","regex","RegExp","filter","language","test","name","getSuggestionValue","suggestion","renderSuggestion","GithubMostPopularList","globalStore","state","dispatch","classes","setValue","suggestions","setSuggestions","currentCityShown","setcurrentCityShown","page","setPage","rowsPerPage","setRowsPerPage","handleChangePage","event","newPage","handleChangeRowsPerPage","parseInt","target","closeSnackbar","loadAllData","city","city_to_search","onChange","newValue","method","onSuggestionsFetchRequested","onSuggestionsClearRequested","inputProps","placeholder","container","tableAndFabContainer","console","log","loading","spinner","table","snackbar","inputandButtonContainer","react_autosuggest__container","input","react_autosuggest__input","inputOpen","react_autosuggest__input__open","inputFocused","react_autosuggest__input__focused","suggestionsContainer","react_autosuggest__suggestions_container","suggestionsContainerOpen","react_autosuggest__suggestions_container__open","suggestionsList","react_autosuggest__suggestions_list","react_autosuggest__suggestion","suggestionHighlighted","react_autosuggest__suggestion__highlighted","modalButtonLabelEnabled","marginTop","totalNoOfUsersFromAPI","String","propTypes","onClose","func","isRequired"],"mappings":"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","sourcesContent":["/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable react/button-has-type */\n/* eslint-disable-next-line react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { Typography } from '@material-ui/core'\nimport GlobalSnackbar from '../../components_libs/GlobalSnackbar'\nimport LoadingSpinner from '../../components_libs/LoadingSpinner'\nimport {\n  loadMostPopularUsers,\n  handleCityToSearchChange,\n  handleSnackBarStatus,\n} from '../../actions/getUserActions'\nimport Button from '@material-ui/core/Button'\nimport Autosuggest from 'react-autosuggest'\nimport EachUserListItem from './EachUserListItem'\nimport cityList from '../../utils/country-city-js'\nimport { defaultTheme } from 'react-autosuggest/dist/theme'\nimport { useStyles } from './GithubMostPopularListStyles'\nimport TablePagination from '@material-ui/core/TablePagination'\n\nconst escapeRegexCharacters = str => {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n}\n\nconst getSuggestions = value => {\n  const escapedValue = escapeRegexCharacters(value.trim())\n  if (escapedValue === '') {\n    return []\n  }\n  const regex = new RegExp('^' + escapedValue, 'i')\n  return cityList.filter(language => regex.test(language.name))\n}\n\nconst getSuggestionValue = suggestion => {\n  return suggestion.name\n}\n\nconst renderSuggestion = suggestion => {\n  return <span>{suggestion.name}</span>\n}\n\nconst GithubMostPopularList = () => {\n  const globalStore = useSelector(state => state.globalStore)\n  const dispatch = useDispatch()\n  const classes = useStyles()\n  const [value, setValue] = useState('')\n  const [suggestions, setSuggestions] = useState([])\n  const [currentCityShown, setcurrentCityShown] = useState('')\n\n  const [page, setPage] = React.useState(0)\n  const [rowsPerPage, setRowsPerPage] = React.useState(10)\n\n  useEffect(() => {\n    dispatch(loadMostPopularUsers(currentCityShown, page, rowsPerPage))\n  }, [currentCityShown, dispatch, page, rowsPerPage])\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage)\n  }\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 10))\n    setPage(0)\n  }\n\n  const closeSnackbar = () => dispatch(handleSnackBarStatus(false))\n\n  const loadAllData = () => {\n    const city = globalStore.city_to_search\n    setcurrentCityShown(city)\n    dispatch(loadMostPopularUsers(city, page, rowsPerPage))\n  }\n\n  const onChange = (event, { newValue, method }) => {\n    dispatch(handleCityToSearchChange(newValue))\n    setValue(newValue)\n  }\n\n  const onSuggestionsFetchRequested = ({ value }) => {\n    setSuggestions(getSuggestions(value))\n  }\n\n  const onSuggestionsClearRequested = () => {\n    setSuggestions([])\n  }\n\n  const inputProps = {\n    placeholder: 'Start typing your city name',\n    value,\n    onChange: onChange,\n  }\n\n  return (\n    <div className={classes.container}>\n      <div className={classes.tableAndFabContainer}>\n        {console.log('PAGE ', page)}\n        {globalStore.loading ? (\n          <div className={classes.spinner}>\n            <LoadingSpinner />\n          </div>\n        ) : (\n          <div className={classes.table}>\n            {console.log('SNACKBAR ', globalStore.snackbar)}\n            <div className={classes.inputandButtonContainer}>\n              <Autosuggest\n                suggestions={suggestions}\n                onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                inputProps={inputProps}\n                theme={{\n                  ...defaultTheme,\n                  container: classes.react_autosuggest__container,\n                  input: classes.react_autosuggest__input,\n                  inputOpen: classes.react_autosuggest__input__open,\n                  inputFocused: classes.react_autosuggest__input__focused,\n                  suggestionsContainer:\n                    classes.react_autosuggest__suggestions_container,\n                  suggestionsContainerOpen:\n                    classes.react_autosuggest__suggestions_container__open,\n                  suggestionsList: classes.react_autosuggest__suggestions_list,\n                  suggestion: classes.react_autosuggest__suggestion,\n                  suggestionHighlighted:\n                    classes.react_autosuggest__suggestion__highlighted,\n                }}\n              />\n              <Button\n                onClick={loadAllData}\n                variant=\"contained\"\n                size=\"large\"\n                color=\"primary\"\n                disabled={globalStore.city_to_search === ''}\n              >\n                <Typography\n                  variant=\"h3\"\n                  className={classes.modalButtonLabelEnabled}\n                >\n                  Load City Data\n                </Typography>\n              </Button>\n            </div>\n            <div style={{ marginTop: '20px' }}>\n              <EachUserListItem\n                currentCityShown={currentCityShown}\n              ></EachUserListItem>\n            </div>\n          </div>\n        )}\n        <TablePagination\n          rowsPerPageOptions={[10, 15, 20]}\n          component=\"div\"\n          count={globalStore.totalNoOfUsersFromAPI}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n        <GlobalSnackbar\n          open={\n            globalStore.snackbar === true ||\n            typeof globalStore.snackbar === 'object' ||\n            typeof globalStore.snackbar === 'string' ||\n            globalStore.snackbar instanceof String\n          }\n          variant=\"error\"\n          message={'Error occurred while loading Initial Data'}\n          onClose={closeSnackbar}\n        />\n      </div>\n    </div>\n  )\n}\n\nGithubMostPopularList.propTypes = {\n  onClose: PropTypes.func.isRequired,\n}\n\nexport default GithubMostPopularList\n"]},"metadata":{},"sourceType":"module"}