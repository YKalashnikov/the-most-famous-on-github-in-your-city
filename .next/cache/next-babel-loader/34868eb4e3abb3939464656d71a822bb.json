{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Object$entries from \"@babel/runtime-corejs2/core-js/object/entries\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\n\n/* eslint-disable import/prefer-default-export */\nimport { LOADING, LOAD_MOST_POPULAR_USERS, ERROR_WHILE_FETCHING_INITIAL_TABLE, CITY_TO_SEARCH, SNACKBAR_STATUS } from './types';\nimport axios from 'axios';\n\nvar pick = require('lodash.pick');\n\nvar map = require('lodash.map');\n\nvar partialRight = require('lodash.partialright');\n\nvar headers = {\n  'Content-Type': 'application/json'\n};\nexport var handleSnackBarStatus = function handleSnackBarStatus(bool) {\n  return {\n    type: SNACKBAR_STATUS,\n    payload: bool\n  };\n};\n\nvar getEachUserGivenId = function getEachUserGivenId(id, index) {\n  return new _Promise(function (resolve, reject) {\n    axios.all([axios.get(\"https://api.github.com/users/\".concat(id)), axios.get(\"https://api.github.com/users/\".concat(id, \"/repos?per_page=200\"))]).then(axios.spread(function (userProfile, userRepo) {\n      var userProfileData = userProfile.data;\n      var totalUserStars = userRepo.data.map(function (i) {\n        return i.stargazers_count;\n      }).reduce(function (total, item) {\n        return total + item;\n      });\n      var result = pick(userProfileData, ['login', 'bio', 'email', 'name', 'id']);\n\n      var modifiedResult = _Object$assign(result, {\n        totalUserStars: totalUserStars\n      });\n\n      if (result && _Object$entries(modifiedResult).length !== 0 && result.constructor === Object) {\n        resolve(modifiedResult);\n      } else {\n        reject(new Error('No data received'));\n      }\n    }))[\"catch\"](function (err) {\n      console.log('HIT the ERROR');\n    });\n  });\n}; // Util function to merge to topUsers array the data from userProfiles array, as they are coming from two different api calls\n\n\nvar mergeArraysConditionally = function mergeArraysConditionally(topUsers, userProfiles) {\n  var merged = []; // First return the first array with only elements whose id matches with an element's id from the second array\n\n  topUsers.every(function (i) {\n    return userProfiles.map(function (j) {\n      return j.id;\n    }).includes(i.id) ? merged.push(i) : null;\n  }); // Now that I have got two separate arrays of matched and the original array, simply merge the matched array (on the basis of ID) with the original array containing the data.\n\n  merged = merged.map(function (i) {\n    return _Object$assign(i, userProfiles.find(function (j) {\n      return j.id === i.id;\n    }));\n  });\n  return merged;\n};\n\nexport var loadMostPopularUsers = function loadMostPopularUsers(city, page, numbersToFetch) {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            try {\n              dispatch({\n                type: LOADING,\n                payload: true\n              });\n              axios({\n                method: 'get',\n                // url: `https://api.github.com/search/users?q=location%3A${city}&followers%3A%3E%3D1000&ref=searchresults&s=followers&type=Users`,\n                url: \"https://api.github.com/search/users?q=location:\".concat(city),\n                headers: headers\n              }).then(function _callee(res) {\n                var totalNoOfUsersFromAPI, start, end, resData, topTenUsersInCity, userIds, topTenUserProfiles, topUserIndividualProfiles;\n                return _regeneratorRuntime.async(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        totalNoOfUsersFromAPI = res.data.items.length;\n                        start = page * numbersToFetch;\n                        end = start + numbersToFetch;\n                        resData = res.data.items.slice(start, end);\n                        topTenUsersInCity = map(resData, partialRight(pick, ['login', 'id', 'avatar_url']));\n                        userIds = topTenUsersInCity.map(function (i) {\n                          return i.login;\n                        });\n                        _context.next = 8;\n                        return _regeneratorRuntime.awrap(userIds.map(getEachUserGivenId));\n\n                      case 8:\n                        topTenUserProfiles = _context.sent;\n                        topUserIndividualProfiles = _Promise.all(topTenUserProfiles);\n                        topUserIndividualProfiles.then(function (res) {\n                          dispatch({\n                            type: LOAD_MOST_POPULAR_USERS,\n                            payload: {\n                              topTenUsersInCity: mergeArraysConditionally(topTenUsersInCity, res),\n                              totalNoOfUsersFromAPI: totalNoOfUsersFromAPI\n                            }\n                          });\n                        })[\"catch\"](function (err) {\n                          dispatch({\n                            type: ERROR_WHILE_FETCHING_INITIAL_TABLE,\n                            payload: 'Error occurred while loading Initial Data'\n                          });\n                        });\n\n                      case 11:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                });\n              })[\"catch\"](function (err) {\n                dispatch({\n                  type: ERROR_WHILE_FETCHING_INITIAL_TABLE,\n                  payload: 'Error occurred while loading Initial Data'\n                });\n              });\n            } catch (err) {\n              dispatch({\n                type: ERROR_WHILE_FETCHING_INITIAL_TABLE,\n                payload: 'Error occurred while loading Initial Data'\n              });\n            }\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  };\n};\nexport var handleCityToSearchChange = function handleCityToSearchChange(city) {\n  return {\n    type: CITY_TO_SEARCH,\n    payload: city\n  };\n};","map":null,"metadata":{},"sourceType":"module"}